// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios15.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftMaui
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc public class MySwiftUIView : ObjectiveC.NSObject, SwiftMaui.UIViewHost {
  @objc @Combine.Published @_projectedValueProperty($counter) public var counter: Swift.Int {
    @objc get
    @objc set
  }
  public var $counter: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc public var onChangedHandler: ((Swift.Int) -> Swift.Void)?
  @objc public var uiView: UIKit.UIView? {
    @objc get
  }
  @objc public var viewController: UIKit.UIViewController? {
    @objc get
  }
  @objc public func createSwiftUIView()
  @objc override dynamic public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MyTextWrapper : ObjectiveC.NSObject, SwiftMaui.UIViewHost {
  @objc override dynamic public init()
  @objc public var uiView: UIKit.UIView? {
    @objc get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@objc public protocol UIViewHost {
  @objc var uiView: UIKit.UIView? { get }
}
